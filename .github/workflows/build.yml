---
name: build
on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

  workflow_dispatch:

env:
  REGISTRY: ghcr.io # GitHub Container Registry

jobs:
  test-api:
    runs-on: ubuntu-latest
    services:
      db:
        image: postgres:14-alpine3.16
        env:
          POSTGRES_USER: db
          POSTGRES_PASSWORD: pass
          POSTGRES_DB: db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.9"
      - name: install apt packages (make, gcc, g++)
        run: sudo apt install -y build-essential redis-server
      - name: install pip dependencies
        working-directory: ./api
        run: pip install -r requirements.txt
      - name: Test coverage
        working-directory: ./api
        run: python3 -m pytest --cov-report=xml --cov=. tests/
        env:
          POSTGRES_USER: db
          POSTGRES_PASSWORD: pass
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: db
          SECRET_KEY: secret
          SQLALCHEMY_TRACK_MODIFICATIONS: True
          DEBUG: True
          FLASK_APP: __init__.py
      - name: SonarCloud Scan API
        uses: sonarsource/sonarcloud-github-action@master
        with:
          projectBaseDir: api
          args: >
            -Dsonar.organization=amani215
            -Dsonar.projectKey=amani215_goalkeeper-performance-tracker-api
            -Dsonar.python.coverage.reportPaths=coverage.xml
            -Dsonar.sources=.
            -Dsonar.test.exclusions=tests/**
            -Dsonar.tests=tests/
            -Dsonar.verbose=true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_API }}
      - name: SonarCloud Fetch API Scan Results
        id: api-quality-gate-response
        uses: fjogeleit/http-request-action@v1
        with:
          url:
            "https://sonarcloud.io/api/\
            qualitygates/project_status?\
            projectKey=amani215_goalkeeper\
            -performance-tracker-api"
          method: GET
      - name: Fail If Quality Gate Is Not Met
        run: exit 1
        if:
          "${{contains(fromJson(\
          steps.api-quality-gate-\
          response.outputs.response)\
          .projectStatus.status,'ERROR')}}"

  test-web-ui:
    runs-on: ubuntu-latest
    needs: test-api
    steps:
      - uses: actions/checkout@v3

      - name: Install modules
        working-directory: ./web-ui
        run: yarn install

      - name: SonarCloud Scan API
        uses: sonarsource/sonarcloud-github-action@master
        with:
          projectBaseDir: web-ui
          args: >
            -Dsonar.organization=amani215
            -Dsonar.projectKey=amani215_goalkeeper-performance-tracker-webui
            -Dsonar.python.coverage.reportPaths=coverage.xml
            -Dsonar.sources=.
            -Dsonar.verbose=true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_WEBUI }}

      - name: Run ESLint
        working-directory: ./web-ui
        run: yarn lint

  test-config:
    runs-on: ubuntu-latest
    needs: test-web-ui
    steps:
      - uses: actions/checkout@v3
      - name: dockerfiles lint
        uses: hadolint/hadolint-action@v2.0.0
        if: always()
        with:
          dockerfile: "**Dockerfile"
          recursive: true
      - name: lint yaml
        uses: karancode/yamllint-github-action@master
        if: always()
        with:
          yamllint_file_or_dir: "."
          yamllint_strict: false
          yamllint_comment: true

  build:
    runs-on: ubuntu-latest
    needs: test-config
    steps:
      - uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      ###### API ######
      - name: Extract metadata (tags, labels) for API
        id: api-meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}-api

      - name: Build and push API image
        uses: docker/build-push-action@v3
        with:
          context: api
          push: true
          tags: |
            ${{ steps.api-meta.outputs.tags }}-alpine,
            ${{ steps.api-meta.outputs.tags }}-alpine3.15
          labels: ${{ steps.api-meta.outputs.labels }}
          file: api/Dockerfile
      ###### UI ######
      - name: Extract metadata (tags, labels) for Web-UI
        id: web-ui-meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}-web-ui

      - name: Build and push Web-UI image
        uses: docker/build-push-action@v3
        with:
          context: web-ui
          push: true
          tags: ${{ steps.web-ui-meta.outputs.tags }}-alpine
          labels: ${{ steps.web-ui-meta.outputs.labels }}
          file: web-ui/Dockerfile
