---
name: build
on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  workflow_dispatch:

env:
  REGISTRY: "ghcr.io" # GitHub Container Registry
  POSTGRES_USER: db
  POSTGRES_PASSWORD: pass
  POSTGRES_HOST: localhost
  POSTGRES_PORT: 5432
  POSTGRES_DB: db
  SQLITE_HOST: "/build.db"
  SECRET_KEY: secret
  SQLALCHEMY_TRACK_MODIFICATIONS: True
  DEBUG: True
  FLASK_APP: __init__.py
  TOKEN_EXPIRY_IN_SEC: 60
  PUBLIC_S3: http://localhost:9000
  PRIVATE_S3: http://minio:9000
  AWS_DEFAULT_REGION: eu-central-1
  AWS_DOMAIN: http://localhost:9000
  AWS_ACCESS_KEY_ID: myminioadmin
  AWS_SECRET_ACCESS_KEY: minio-secret-key-change-me
  PROFILE_PICS_BUCKET: build-profile-pics
  GOALKEEPER_PICS_BUCKET: build-goalkeeper-pics
  TRAINING_FORMS_BUCKET: build-training-forms
  DOCUMENTS_BUCKET: build-documents
  REDIS_HOST: localhost
  REDIS_PORT: 6379
  REDIS_CACHE_TTL: 86400
  ADMIN_USERNAME: build
  ADMIN_PASSWORD: buildbuild
  TF_MODULES_DIR: $GITHUB_WORKSPACE/terraform/modules
  GRAFANA_ENDPOINT_PROD: ${vars.GRAFANA_ENDPOINT_PROD}

jobs:
  test-api:
    runs-on: ubuntu-latest
    services:
      db:
        image: postgres:14-alpine3.16
        env:
          POSTGRES_USER: db
          POSTGRES_PASSWORD: pass
          POSTGRES_DB: db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10.12"
      - name: Deploy Minio
        run: |
          docker run -dt \
            -p 9000:9000 -p 9001:9001 \
            --name "minio" \
            -e "MINIO_ROOT_USER=myminioadmin" \
            -e "MINIO_ROOT_PASSWORD=minio-secret-key-change-me" \
            minio/minio:RELEASE.2024-04-18T19-09-19Z.fips \
            server --console-address ":9001" /data
      - name: Install APT Packages and Redis Server
        run: sudo apt install -y build-essential redis-server
      - name: Install pip Dependencies
        working-directory: ./api
        run: pip install -r requirements.txt
      - name: Test Coverage
        working-directory: ./api
        run: python3 -m pytest --cov-report=xml --cov=. tests/
      - name: SonarCloud Scan API
        uses: sonarsource/sonarcloud-github-action@master
        with:
          projectBaseDir: api
          args: >
            -Dsonar.organization=amani215
            -Dsonar.projectKey=amani215_goalkeeper-performance-tracker-api
            -Dsonar.python.coverage.reportPaths=coverage.xml
            -Dsonar.sources=.
            -Dsonar.test.exclusions=tests/**
            -Dsonar.tests=tests/
            -Dsonar.verbose=true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_API }}
      - name: SonarCloud Fetch API Scan Results
        id: api-quality-gate-response
        uses: fjogeleit/http-request-action@v1
        with:
          url: "https://sonarcloud.io/api/qualitygates/project_status?projectKey=amani215_goalkeeper-performance-tracker-api"
          method: GET
      - name: Fail If Quality Gate Is Not Met
        run: exit 1
        if: "${{contains(fromJson(steps.api-quality-gate-response.outputs.response).projectStatus.status,'ERROR')}}"

  test-config:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: dockerfiles lint
        uses: hadolint/hadolint-action@v2.0.0
        if: always()
        with:
          dockerfile: "**Dockerfile"
          recursive: true
      - name: Lint YAML
        uses: karancode/yamllint-github-action@master
        if: always()
        with:
          yamllint_file_or_dir: "."
          yamllint_strict: false
          yamllint_comment: true

  build:
    runs-on: ubuntu-latest
    needs: ["test-config", "test-api"]
    steps:
      - uses: actions/checkout@v3

      - name: Log into the Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Metadata (tags, labels)
        id: api-meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}

      - name: Build and Push Image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: |
            ${{ steps.api-meta.outputs.tags }}-alpine,
            ${{ steps.api-meta.outputs.tags }}-alpine3.15
          labels: ${{ steps.api-meta.outputs.labels }}
          build-args: |
            GRAFANA_ENDPOINT_PROD=${vars.GRAFANA_ENDPOINT_PROD}
